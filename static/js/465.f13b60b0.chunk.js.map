{"version":3,"file":"static/js/465.f13b60b0.chunk.js","mappings":"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","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/Form.js","components/ContactList.js","components/Filter.js","pages/Contacts.js","webpack://react-homework-template/./src/pages/styles.module.css?be7c"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addThunkData } from \"../redux/contacts/operations\";\nimport { getContact } from \"../redux/contacts/selectors\";\nimport s from \"./contacts.module.css\";\nimport Notify from 'simple-notify'\nimport 'simple-notify/dist/simple-notify.min.css'\n\n\nexport default function Form() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contacts = useSelector(getContact);\n  const dispatch = useDispatch();\n\n  const handleChangeInput = (e) => {\n    if (e.target.name === \"name\") {\n      setName(e.target.value);\n    } else if (e.target.name === \"number\") {\n      setNumber(e.target.value);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n    new Notify({\n    status: 'error',\n    text: `Name \"${name}\" is already in contacts`,\n    effect: 'slide',\n    type: 3,\n    autoclose: 2000,\n  })\n    } else {\n      dispatch(addThunkData({ name, number, id: uuidv4() }));\n      setName(\"\");\n      setNumber(\"\");\n      new Notify({\n        status: 'success',\n        text: `Contact \"${name}\" is adding to your contacts`,\n        effect: 'slide',\n        type: 3,\n        autoclose: 2000,\n      })\n    }\n  };\n\n  return (\n    <>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label>Name</label>\n        <input\n          className={s.input}\n          value={name}\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChangeInput}\n        />\n        <label>Number</label>\n        <input\n          className={s.input}\n          value={number}\n          autoComplete=\"off\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChangeInput}\n        />\n        <button type=\"submit\" className={s.btn}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport style from \"./contacts.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getThunkData, deleteThunkData } from \"../redux/contacts/operations\";\nimport { getFilteredContacts } from \"../redux/contacts/selectors\";\n\nimport Notify from 'simple-notify'\nimport 'simple-notify/dist/simple-notify.min.css'\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const filterContacts = useSelector(getFilteredContacts);\n\n  useEffect(() => {\n    dispatch(getThunkData());\n  }, [dispatch]);\n  const onDelete = (id) => {\n    dispatch(deleteThunkData(id));\n    dispatch(getThunkData());\n     new Notify({\n            status: 'warning',\n            text: `Contact has been deleted`,\n            effect: 'slide',\n            type: 3,\n            autoclose: 2000,\n          })\n  }\n  return (\n    <ul className={style.list}>\n      {filterContacts.map(({ id, name, number }) => (\n        <li className={style.listItem} key={id}>\n          <p>{name}: {number}</p>\n          <button\n            type=\"button\"\n            className={style.btnDelete}\n            id={id}\n            onClick={()=>onDelete(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from \"react\";\nimport style from \"./contacts.module.css\";\nimport { changeFilter } from \"../redux/contacts/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <label htmlFor=\"find\" className={style.label}>\n        Find contacts by name\n      </label>\n      <input\n        className={style.input}\n        autoComplete=\"off\"\n        id=\"find\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]\"\n        onChange={(e) => {\n          e.preventDefault();\n          dispatch(changeFilter(e.target.value.toLowerCase()));\n        }}\n      ></input>\n    </>\n  );\n}\n","import Form from \"../components/Form\";\nimport ContactList from \"../components/ContactList\";\nimport Filter from \"../components/Filter\";\nimport s from \"./styles.module.css\";\n\nexport default function Contacts() {\n  return (\n    <>\n      <h1 className={s.title}>Your phonebook</h1>\n      <Form />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"styles_label__IRvBR\",\"title\":\"styles_title__Eys6g\",\"form\":\"styles_form__oR3c0\",\"input\":\"styles_input__t9D6P\",\"btn\":\"styles_btn__jb-0V\"};"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","REGEX","byteToHex","i","push","toString","substr","arr","offset","arguments","length","undefined","toLowerCase","validate","TypeError","options","buf","rnds","random","stringify","Form","useState","name","setName","number","setNumber","contacts","useSelector","getContact","dispatch","useDispatch","handleChangeInput","e","target","value","className","s","onSubmit","preventDefault","find","contact","Notify","status","text","effect","type","autoclose","addThunkData","id","uuidv4","autoComplete","pattern","title","required","onChange","ContactList","filterContacts","getFilteredContacts","useEffect","getThunkData","style","map","onClick","deleteThunkData","onDelete","Filter","htmlFor","changeFilter","Contacts"],"sourceRoot":""}